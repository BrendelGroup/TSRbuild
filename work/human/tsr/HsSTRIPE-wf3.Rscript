loadWF2      <- 1


# Start the fun ...: 
#
library("TSRchitect")


if (loadWF2) {
  load("HsSTRIPE-wf2.RData")
} else {
  source("HsSTRIPE-wf2.Rscript")
}
cat (HsSTRIPE@title,"\tWorkflow 3\n")


#We'll use the TSSthreshold derived in workflow HsSTRIPE-wf2.Rscript and clustDist=40 from here on.
#To choose different values, change the following two lines appropriately.
#
#TSSthreshold    <- 20
 useClustDist    <- 40
DISPLAYthreshold <-  1

#
# ... finding TSRs:
HsSTRIPE <- determineTSR(experimentName=HsSTRIPE, n.cores=8, tssSetType="replicates", tssSet="all", tagCountThreshold=TSSthreshold, clustDist=useClustDist, writeTable=TRUE)
HsSTRIPE <- determineTSR(experimentName=HsSTRIPE, n.cores=5, tssSetType="merged",     tssSet="all", tagCountThreshold=TSSthreshold, clustDist=useClustDist, writeTable=TRUE)

# ... now adding per sample tag counts and annotation to the merged data sets:

HsSTRIPE <- addTagCountsToTSR( experimentName=HsSTRIPE, tsrSetType="merged", tsrSet=1, tagCountThreshold=DISPLAYthreshold, writeTable=TRUE)
HsSTRIPE <- addAnnotationToTSR(experimentName=HsSTRIPE, tsrSetType="merged", tsrSet=1, upstreamDist=pupstream, downstreamDist=pdownstream, feature="gene", featureColumn="ID", writeTable=TRUE)

# ... save the data generated by the above for future reloading with the R load command:
save.image(file="HsSTRIPE-wf3.RData")
